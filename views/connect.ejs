
<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('./partials/head.ejs') %>
    <title>Connect - Todo App</title>
    <style>
      :root {
        --primary-color: #4285f4;
        --background-color: #f8f9fa;
        --card-bg: #fff;
        --text-color: #3c4043;
        --light-text-color: #70757a;
        --shadow-sm: 0 1px 2px rgba(60,64,67,.3), 0 1px 3px rgba(60,64,67,.15);
        --border-color: #e0e0e0;
      }
      body {
        background-color: var(--background-color);
        font-family: 'Inter', sans-serif;
        color: var(--text-color);
      }
      .connect-container {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: 2rem;
        padding: 2rem 1rem;
      }
      @media (max-width: 768px) {
        .connect-container {
          grid-template-columns: 1fr;
          gap: 1rem;
          padding: 1rem;
        }
      }
      .panel {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: var(--shadow-sm);
        border: none;
      }
      .rooms-section {
        min-height: 400px;
      }
      .room-list {
        max-height: 60vh;
        overflow-y: auto;
        padding-right: 0.5rem;
      }
      .room-list::-webkit-scrollbar {
        width: 6px;
      }
      .room-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
      }
      .room-list::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 3px;
      }
      .no-rooms {
        color: var(--light-text-color);
        font-style: italic;
        text-align: center;
        padding: 2rem;
      }
      .chat-section {
        display: flex;
        flex-direction: column;
        min-height: 70vh;
      }
      .chat-box {
        flex: 1;
        overflow-y: auto;
        border: 1px solid var(--border-color);
        padding: 1rem;
        border-radius: 8px;
        background: #fafafa;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        max-height: 400px;
      }
      .chat-message {
        padding: 0.75rem 1rem;
        border-radius: 18px;
        max-width: 70%;
        word-wrap: break-word;
        font-size: 14px;
        line-height: 1.4;
        margin-bottom: 0.25rem;
      }
      .message-sent {
        align-self: flex-end;
        background: var(--primary-color);
        color: #fff;
        border-bottom-right-radius: 5px;
      }
      .message-received {
        align-self: flex-start;
        background: #e9ecef;
        color: var(--text-color);
        border-bottom-left-radius: 5px;
      }
      .system-message {
        align-self: center;
        background: none;
        color: var(--light-text-color);
        font-style: italic;
        font-size: 13px;
        padding: 0.25rem 0.5rem;
      }
      .chat-input {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
      }
      .chat-input input {
        flex: 1;
        border-radius: 20px;
        border: 1px solid var(--border-color);
        padding: 0.5rem 1rem;
      }
      .chat-input button {
        border-radius: 20px;
        padding: 0.5rem 1.5rem;
      }
      .btn-small {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        border-radius: 6px;
      }
      .task-list {
        max-height: 250px;
        overflow-y: auto;
        padding-right: 0.5rem;
      }
      .task-list::-webkit-scrollbar {
        width: 6px;
      }
      .task-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
      }
      .task-list::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 3px;
      }
      .task-item {
        margin-bottom: 1rem;
        padding: 1rem;
        border-radius: 8px;
        background: var(--card-bg);
        border-left: 4px solid var(--primary-color);
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      }
      .task-meta {
        font-size: 0.875rem;
        color: var(--light-text-color);
        margin-top: 0.25rem;
      }
      .badge-tasks {
        background: var(--light-text-color);
        color: #fff;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        margin-left: 0.5rem;
        font-size: 0.75rem;
      }
      .btn-outline-secondary {
        color: var(--primary-color);
        border-color: var(--primary-color);
      }
      .btn-outline-secondary:hover {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
      }
      .hidden {
        display: none !important;
      }
      .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(66, 133, 244, 0.25);
      }
      .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
      }
      .btn-primary:hover {
        background-color: #3367d6;
        border-color: #3367d6;
      }
      .file-upload-wrapper {
        position: relative;
      }
      .file-upload-wrapper input[type="file"] {
        padding: 0.5rem;
        border-radius: 6px;
        border: 1px solid var(--border-color);
        background: var(--card-bg);
        width: 100%;
        cursor: pointer;
      }
      .file-upload-wrapper input[type="file"]:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(66, 133, 244, 0.25);
        outline: none;
      }
      .file-upload-wrapper small {
        display: block;
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: var(--light-text-color);
      }
    </style>
  </head>
  <body>
<%- include('./partials/navbar.ejs') %>

    <div class="container-fluid mt-4">
      <div class="connect-container">

        <!-- Rooms column -->
        <div class="panel rooms-section">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h4 class="mb-0">Collaboration Rooms</h4>
      <button id="refreshRoomsBtn" class="btn btn-outline-secondary btn-sm">Refresh</button>
    </div>

          <form id="createRoomForm" class="mb-3" action="/rooms" method="post">
            <div class="input-group">
              <input type="text" name="roomName" class="form-control" placeholder="New room name" required />
              <button class="btn btn-primary" type="submit">Create</button>
            </div>
          </form>

          <ul id="roomList" class="room-list list-unstyled">
            <% if (rooms && rooms.length > 0) { %>
              <% rooms.forEach(room => { %>
                <li class="d-flex justify-content-between align-items-center mb-2 p-2 rounded" style="border:1px solid #f0f0f0;">
                  <div>
                    <strong><%= room.name %></strong>
                    <span class="badge-tasks"><%= room.taskCount || 0 %> tasks</span>
                    <div class="task-meta">Created <%= new Date(room.createdAt).toLocaleDateString() %></div>
                  </div>
                  <div>
                    <button class="btn btn-sm btn-success join-room-btn btn-small" data-room="<%= room.name %>" data-room-id="<%= room._id %>">Join</button>
                    <button class="btn btn-sm btn-danger delete-room-btn btn-small" data-room="<%= room.name %>">Delete</button>
                  </div>
                </li>
              <% }) %>
            <% } else { %>
              <div class="no-rooms">No rooms yet â€” create one to start collaborating.</div>
            <% } %>
          </ul>
        </div>

        <!-- Chat / Room Column -->
        <div id="roomSection" class="panel chat-section hidden">
          <div class="chat-header d-flex justify-content-between align-items-center">
            <div>
              <h4 id="roomNameHeader" class="mb-0">Room</h4>
              <small id="roomInfo" class="text-muted">Shared tasks and chat</small>
            </div>
            <button id="leaveRoomBtn" class="btn btn-danger btn-sm">Leave</button>
          </div>

          <!-- Shared tasks -->
          <div class="shared-tasks mt-3">
            <h5>Shared Tasks</h5>
            <div id="sharedTaskList" class="task-list mb-2"></div>
            <form id="addSharedTaskForm" enctype="multipart/form-data">
              <input type="hidden" name="roomName" id="taskRoomName">
              <div class="row g-2 mb-2">
                <div class="col-md-7 col-12"><input type="text" name="task" class="form-control" placeholder="Task description" required></div>
                <div class="col-md-3 col-6"><input type="date" name="deadline" class="form-control"></div>
                <div class="col-md-2 col-6"><button class="btn btn-primary w-100" type="submit">Share</button></div>
              </div>
              <div class="row g-2">
                <div class="col-12">
                  <div class="file-upload-wrapper">
                    <input type="file" name="media" id="mediaUpload" class="form-control" accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt" multiple>
                    <small class="text-muted">Optional: Upload images, videos, audio, or documents (max 10MB each)</small>
                  </div>
                </div>
              </div>
            </form>
          </div>

          <!-- Chat -->
          <div class="chat-container mt-3 d-flex flex-column" style="flex:1;">
            <div class="d-flex justify-content-between align-items-center">
              <h5 class="mb-0">Chat</h5>
              <button id="showMoreHistoryBtn" class="btn btn-outline-secondary btn-sm" style="display: none;">Show More History</button>
            </div>
            <div id="chatBox" class="chat-box"></div>
            <form id="chatForm" class="chat-input mt-2">
              <input type="text" id="chatInput" class="form-control" placeholder="Type a message..." autocomplete="off" />
              <button type="submit" class="btn btn-primary">Send</button>
            </form>
          </div>
        </div>

      </div>
    </div>

    <%- include('./partials/footer.ejs') %>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      // Helpers
      const escapeHtml = (unsafe) => {
        if (!unsafe && unsafe !== 0) return '';
        return unsafe.toString()
          .replaceAll('&', '&amp;')
          .replaceAll('<', '&lt;')
          .replaceAll('>', '&gt;')
          .replaceAll('"', '&quot;')
          .replaceAll("'", '&#039;');
      };

      const socket = io();
      const roomList = document.getElementById('roomList');
      const roomSection = document.getElementById('roomSection');
      const roomNameHeader = document.getElementById('roomNameHeader');
      const taskRoomName = document.getElementById('taskRoomName');
      const sharedTaskList = document.getElementById('sharedTaskList');
      const chatBox = document.getElementById('chatBox');
      const chatForm = document.getElementById('chatForm');
      const chatInput = document.getElementById('chatInput');
      const leaveRoomBtn = document.getElementById('leaveRoomBtn');
      const refreshRoomsBtn = document.getElementById('refreshRoomsBtn');
      const showMoreHistoryBtn = document.getElementById('showMoreHistoryBtn');

      const CURRENT_USER_ID = '<%= user ? user.id : "" %>';
      const CURRENT_USER_NAME = "<%= user ? user.name : 'Guest' %>";
      let currentRoom = null;
      let chatHistoryLoaded = false;
      let chatHistoryPage = 0;
      const CHAT_HISTORY_LIMIT = 1; // Show only 1 message initially

      // Join room
      function attachJoinRoomListeners() {
        document.querySelectorAll('.join-room-btn').forEach(button => {
          button.onclick = () => {
            const roomName = button.dataset.room;
            if (currentRoom) socket.emit('leave room', currentRoom);
            currentRoom = roomName;
            socket.emit('joinRoom', roomName);
            roomNameHeader.textContent = `Room: ${roomName}`;
            taskRoomName.value = roomName;
            roomSection.classList.remove('hidden');
            chatBox.innerHTML = '';
            sharedTaskList.innerHTML = '';
            chatHistoryLoaded = false;
            chatHistoryPage = 0;
            showMoreHistoryBtn.style.display = 'none';
            // Request initial chat history (only 1 message)
            socket.emit('request chat history', { room: roomName, page: 0, limit: CHAT_HISTORY_LIMIT });
            // Request online users count for the room
            socket.emit('request online users', roomName);
          };
        });
      }

      // Delete room
      function attachDeleteRoomListeners() {
        document.querySelectorAll('.delete-room-btn').forEach(button => {
          button.onclick = async () => {
            const roomName = button.dataset.room;
            if (confirm(`Are you sure you want to delete the room "${roomName}"? This will also delete all messages and shared tasks in the room.`)) {
              try {
                const response = await fetch(`/rooms/delete/${encodeURIComponent(roomName)}`, {
                  method: 'POST'
                });
                if (response.ok) {
                  socket.emit('request room list');
                } else {
                  alert('Error deleting room');
                }
              } catch (err) {
                console.error('Error:', err);
                alert('Error deleting room');
              }
            }
          };
        });
      }

      // Task action handlers
      function attachTaskActionListeners() {
        // Accept task
        document.querySelectorAll('.accept-task-btn').forEach(button => {
          button.onclick = async () => {
            const taskId = button.dataset.taskId;
            try {
              const response = await fetch(`/rooms/accept-task/${taskId}`, {
                method: 'POST'
              });
              if (response.ok) {
                // Task list will be updated via socket
              } else {
                alert('Error accepting task');
              }
            } catch (err) {
              console.error('Error:', err);
              alert('Error accepting task');
            }
          };
        });

        // Deny task
        document.querySelectorAll('.deny-task-btn').forEach(button => {
          button.onclick = async () => {
            const taskId = button.dataset.taskId;
            if (confirm('Are you sure you want to decline this task?')) {
              try {
                const response = await fetch(`/rooms/decline-task/${taskId}`, {
                  method: 'POST'
                });
                if (response.ok) {
                  // Task list will be updated via socket
                } else {
                  alert('Error declining task');
                }
              } catch (err) {
                console.error('Error:', err);
                alert('Error declining task');
              }
            }
          };
        });

        // Complete task
        document.querySelectorAll('.complete-task-btn').forEach(button => {
          button.onclick = async () => {
            const taskId = button.dataset.taskId;
            try {
              // Fix: Use correct endpoint for completing shared tasks
              const response = await fetch(`/rooms/complete-shared-task/${taskId}`, {
                method: 'POST'
              });
              if (response.ok) {
                // Task list will be updated via socket
              } else {
                alert('Error completing task');
              }
            } catch (err) {
              console.error('Error:', err);
              alert('Error completing task');
            }
          };
        });
      }

      attachJoinRoomListeners();
      attachDeleteRoomListeners();

      refreshRoomsBtn.addEventListener('click', (e) => {
        e.preventDefault();
        socket.emit('request room list');
      });

      leaveRoomBtn.addEventListener('click', () => {
        if (currentRoom) {
          socket.emit('leave room', currentRoom);
          currentRoom = null;
          roomSection.classList.add('hidden');
        }
      });

      // Chat send
      chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const message = chatInput.value.trim();
        if (!message || !currentRoom) return;
        socket.emit('chat message', {
          room: currentRoom,
          message,
          username: CURRENT_USER_NAME,
          userId: CURRENT_USER_ID
        });
        chatInput.value = '';
      });

      // Render chat
      function addChatMessage(data) {
        const el = document.createElement('div');
        if (data.isSystem) {
          el.className = 'system-message';
          if (data.isItalic) {
            el.style.fontStyle = 'italic';
          }
          el.textContent = data.message;
        } else {
          el.className = 'chat-message ' + (data.userId === CURRENT_USER_ID ? 'message-sent' : 'message-received');
          el.innerHTML = escapeHtml(data.message);
        }
        chatBox.appendChild(el);
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      // Show more history button click handler
      showMoreHistoryBtn.addEventListener('click', () => {
        if (!currentRoom) return;
        chatHistoryPage++;
        socket.emit('request chat history', { room: currentRoom, page: chatHistoryPage, limit: CHAT_HISTORY_LIMIT });
      });

      // Handle chat history response
      socket.on('chat history', (messages) => {
        if (chatHistoryPage === 0) {
          chatBox.innerHTML = '';
        }
        messages.forEach(addChatMessage);
        if (messages.length < CHAT_HISTORY_LIMIT) {
          showMoreHistoryBtn.style.display = 'none';
        } else {
          showMoreHistoryBtn.style.display = 'inline-block';
        }
      });

      socket.on('chat message', (data) => addChatMessage(data));
      socket.on('system message', (msg) => addChatMessage({ isSystem:true, message:msg }));

      // Rooms refresh
      socket.on('room list update', (rooms) => {
        roomList.innerHTML = '';
        if (!rooms || rooms.length === 0) {
          roomList.innerHTML = '<div class="no-rooms">No rooms available.</div>';
          return;
        }
        rooms.forEach(room => {
          const li = document.createElement('li');
          li.className = 'd-flex justify-content-between align-items-center mb-2 p-2 rounded';
          li.style.border = '1px solid #f0f0f0';
          li.innerHTML = `
            <div>
              <strong>${escapeHtml(room.name)}</strong>
              <span class="badge-tasks">${room.taskCount || 0} tasks</span>
              <div class="task-meta">Created ${new Date(room.createdAt).toLocaleDateString()}</div>
            </div>
            <div>
              <button class="btn btn-sm btn-success join-room-btn btn-small" data-room="${escapeHtml(room.name)}" data-room-id="${room._id}">Join</button>
              <button class="btn btn-sm btn-danger delete-room-btn btn-small" data-room="${escapeHtml(room.name)}">Delete</button>
            </div>`;
          roomList.appendChild(li);
        });
        attachJoinRoomListeners();
        attachDeleteRoomListeners();
      });

      // Listen for online users count update
      socket.on('online users update', (data) => {
        if (data.room === currentRoom) {
          onlineUserCountSpan.textContent = data.count;
        }
      });

      // Handle room deletion notification
      socket.on('room deleted', (deletedRoomName) => {
        if (currentRoom === deletedRoomName) {
          currentRoom = null;
          roomSection.classList.add('hidden');
          chatBox.innerHTML = '';
          sharedTaskList.innerHTML = '';
          alert(`The room "${deletedRoomName}" has been deleted.`);
        }
        socket.emit('request room list');
      });

      // Add shared task form submission
      const addSharedTaskForm = document.getElementById('addSharedTaskForm');
      addSharedTaskForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Check if user is in a room
        if (!currentRoom) {
          alert('Please join a room first before sharing tasks.');
          return;
        }

        const formData = new FormData(addSharedTaskForm);

        // Debug: Log form data
        console.log('Form data being sent:');
        for (let [key, value] of formData.entries()) {
          console.log(key, value);
        }
        console.log('Current room:', currentRoom);

        try {
          const response = await fetch('/rooms/add-shared-task', {
            method: 'POST',
            body: formData
          });
          const result = await response.json();
          if (result.success) {
            addSharedTaskForm.reset();
          } else {
            alert('Error adding task: ' + (result.message || 'Unknown error'));
          }
        } catch (err) {
          console.error('Error:', err);
          alert('Error adding task');
        }
      });

      // Shared tasks update
      socket.on('task update', (tasks) => {
        sharedTaskList.innerHTML = '';
        if (!tasks || tasks.length === 0) {
          sharedTaskList.innerHTML = '<div class="text-muted">No shared tasks yet.</div>';
          return;
        }
        tasks.forEach(task => {
          const div = document.createElement('div');
          div.className = 'task-item';
          const deadlineText = task.deadline ? `Deadline: ${new Date(task.deadline).toLocaleDateString()}` : '';
          const senderText = task.sender ? `By: ${escapeHtml(task.sender.name)}` : '';
          const receiverText = task.receiver ? `Assigned to: ${escapeHtml(task.receiver.name)}` : '';

          let actionButtons = '';
          if (!task.receiver && task.sender._id !== CURRENT_USER_ID) {
            // Task is available for acceptance
            actionButtons = `
              <div class="mt-2">
                <button class="btn btn-sm btn-success accept-task-btn" data-task-id="${task._id}">Accept</button>
                <button class="btn btn-sm btn-danger deny-task-btn" data-task-id="${task._id}">Deny</button>
              </div>
            `;
          } else if (task.receiver && task.receiver._id === CURRENT_USER_ID && !task.completed) {
            // Task is assigned to current user and not completed
            actionButtons = `
              <div class="mt-2">
                <button class="btn btn-sm btn-primary complete-task-btn" data-task-id="${task._id}">Mark Complete</button>
              </div>
            `;
          }

          div.innerHTML = `
            <strong>${escapeHtml(task.task)}</strong>
            <div class="task-meta">${senderText} ${receiverText} ${deadlineText}</div>
            ${actionButtons}
          `;
          sharedTaskList.appendChild(div);
        });

        // Attach event listeners for task actions
        attachTaskActionListeners();
      });

      // Error handling
      socket.on('error', (msg) => {
        alert('Error: ' + msg);
      });

      socket.emit('request room list');
    </script>
  </body>
</html>
